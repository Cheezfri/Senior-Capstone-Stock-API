/*
 * BackEndApi
 * This api is connects the middleware and backend of a portfolio management web application
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package edu.albany.icsi418.fa19.teamy.middleware.BackEndClient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import edu.albany.icsi418.fa19.teamy.middleware.BackEndClient.model.PortfolioRights;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * How a portfolio is shared
 */
@Schema(description = "How a portfolio is shared")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-16T01:51:45.397Z[GMT]")
public class PortfolioShare {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("portfolioId")
  private Long portfolioId = null;

  @SerializedName("sharedWithUserId")
  private Long sharedWithUserId = null;

  @SerializedName("portfolioRights")
  private PortfolioRights portfolioRights = null;

  public PortfolioShare id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(example = "123", description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public PortfolioShare portfolioId(Long portfolioId) {
    this.portfolioId = portfolioId;
    return this;
  }

   /**
   * Get portfolioId
   * @return portfolioId
  **/
  @Schema(description = "")
  public Long getPortfolioId() {
    return portfolioId;
  }

  public void setPortfolioId(Long portfolioId) {
    this.portfolioId = portfolioId;
  }

  public PortfolioShare sharedWithUserId(Long sharedWithUserId) {
    this.sharedWithUserId = sharedWithUserId;
    return this;
  }

   /**
   * Get sharedWithUserId
   * @return sharedWithUserId
  **/
  @Schema(example = "12345", description = "")
  public Long getSharedWithUserId() {
    return sharedWithUserId;
  }

  public void setSharedWithUserId(Long sharedWithUserId) {
    this.sharedWithUserId = sharedWithUserId;
  }

  public PortfolioShare portfolioRights(PortfolioRights portfolioRights) {
    this.portfolioRights = portfolioRights;
    return this;
  }

   /**
   * Get portfolioRights
   * @return portfolioRights
  **/
  @Schema(description = "")
  public PortfolioRights getPortfolioRights() {
    return portfolioRights;
  }

  public void setPortfolioRights(PortfolioRights portfolioRights) {
    this.portfolioRights = portfolioRights;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortfolioShare portfolioShare = (PortfolioShare) o;
    return Objects.equals(this.id, portfolioShare.id) &&
        Objects.equals(this.portfolioId, portfolioShare.portfolioId) &&
        Objects.equals(this.sharedWithUserId, portfolioShare.sharedWithUserId) &&
        Objects.equals(this.portfolioRights, portfolioShare.portfolioRights);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, portfolioId, sharedWithUserId, portfolioRights);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortfolioShare {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    portfolioId: ").append(toIndentedString(portfolioId)).append("\n");
    sb.append("    sharedWithUserId: ").append(toIndentedString(sharedWithUserId)).append("\n");
    sb.append("    portfolioRights: ").append(toIndentedString(portfolioRights)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
