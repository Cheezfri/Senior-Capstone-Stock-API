/*
 * FrontEndApi
 * This api is connects the middleware and frontend of a portfolio management web application 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package edu.albany.icsi418.fa19.teamy.frontend.swagger.api;

import edu.albany.icsi418.fa19.teamy.frontend.swagger.ApiCallback;
import edu.albany.icsi418.fa19.teamy.frontend.swagger.ApiClient;
import edu.albany.icsi418.fa19.teamy.frontend.swagger.ApiException;
import edu.albany.icsi418.fa19.teamy.frontend.swagger.ApiResponse;
import edu.albany.icsi418.fa19.teamy.frontend.swagger.Configuration;
import edu.albany.icsi418.fa19.teamy.frontend.swagger.Pair;
import edu.albany.icsi418.fa19.teamy.frontend.swagger.ProgressRequestBody;
import edu.albany.icsi418.fa19.teamy.frontend.swagger.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import edu.albany.icsi418.fa19.teamy.frontend.swagger.model.Asset;
import edu.albany.icsi418.fa19.teamy.frontend.swagger.model.AssetAggregateData;
import edu.albany.icsi418.fa19.teamy.frontend.swagger.model.AssetPriceOverTime;
import edu.albany.icsi418.fa19.teamy.frontend.swagger.model.AssetProportion;
import edu.albany.icsi418.fa19.teamy.frontend.swagger.model.HoldingAsset;
import org.threeten.bp.OffsetDateTime;
import edu.albany.icsi418.fa19.teamy.frontend.swagger.model.Portfolio;
import edu.albany.icsi418.fa19.teamy.frontend.swagger.model.PortfolioAggregateData;
import edu.albany.icsi418.fa19.teamy.frontend.swagger.model.PortfolioTransaction;
import edu.albany.icsi418.fa19.teamy.frontend.swagger.model.PortfolioTransactionItem;
import edu.albany.icsi418.fa19.teamy.frontend.swagger.model.SharedPortfolio;
import edu.albany.icsi418.fa19.teamy.frontend.swagger.model.User;
import edu.albany.icsi418.fa19.teamy.frontend.swagger.model.UserSignup;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for assetAggregateforGraphGet
     * @param portfolioId Id of the portfolio (required)
     * @param startDate The start date of the analytic calculation (optional)
     * @param endDate The end date of the analytic calculation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call assetAggregateforGraphGetCall(Long portfolioId, OffsetDateTime startDate, OffsetDateTime endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/assetAggregateforGraph";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolioId", portfolioId));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call assetAggregateforGraphGetValidateBeforeCall(Long portfolioId, OffsetDateTime startDate, OffsetDateTime endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling assetAggregateforGraphGet(Async)");
        }
        
        com.squareup.okhttp.Call call = assetAggregateforGraphGetCall(portfolioId, startDate, endDate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * The aggregate of each asset in portfolio 
     * @param portfolioId Id of the portfolio (required)
     * @param startDate The start date of the analytic calculation (optional)
     * @param endDate The end date of the analytic calculation (optional)
     * @return AssetAggregateData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AssetAggregateData assetAggregateforGraphGet(Long portfolioId, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        ApiResponse<AssetAggregateData> resp = assetAggregateforGraphGetWithHttpInfo(portfolioId, startDate, endDate);
        return resp.getData();
    }

    /**
     * 
     * The aggregate of each asset in portfolio 
     * @param portfolioId Id of the portfolio (required)
     * @param startDate The start date of the analytic calculation (optional)
     * @param endDate The end date of the analytic calculation (optional)
     * @return ApiResponse&lt;AssetAggregateData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AssetAggregateData> assetAggregateforGraphGetWithHttpInfo(Long portfolioId, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        com.squareup.okhttp.Call call = assetAggregateforGraphGetValidateBeforeCall(portfolioId, startDate, endDate, null, null);
        Type localVarReturnType = new TypeToken<AssetAggregateData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The aggregate of each asset in portfolio 
     * @param portfolioId Id of the portfolio (required)
     * @param startDate The start date of the analytic calculation (optional)
     * @param endDate The end date of the analytic calculation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assetAggregateforGraphGetAsync(Long portfolioId, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<AssetAggregateData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assetAggregateforGraphGetValidateBeforeCall(portfolioId, startDate, endDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AssetAggregateData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for assetProportionsGet
     * @param portfolioId Portfolio for which the transaction was made (required)
     * @param sortBy The sorting order in which the data is required (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call assetProportionsGetCall(Long portfolioId, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/assetProportions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolioId", portfolioId));
        if (sortBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("SortBy", sortBy));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call assetProportionsGetValidateBeforeCall(Long portfolioId, String sortBy, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling assetProportionsGet(Async)");
        }
        // verify the required parameter 'sortBy' is set
        if (sortBy == null) {
            throw new ApiException("Missing the required parameter 'sortBy' when calling assetProportionsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = assetProportionsGetCall(portfolioId, sortBy, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get the list of transactions related to a portfolio
     * @param portfolioId Portfolio for which the transaction was made (required)
     * @param sortBy The sorting order in which the data is required (required)
     * @return List&lt;AssetProportion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AssetProportion> assetProportionsGet(Long portfolioId, String sortBy) throws ApiException {
        ApiResponse<List<AssetProportion>> resp = assetProportionsGetWithHttpInfo(portfolioId, sortBy);
        return resp.getData();
    }

    /**
     * 
     * get the list of transactions related to a portfolio
     * @param portfolioId Portfolio for which the transaction was made (required)
     * @param sortBy The sorting order in which the data is required (required)
     * @return ApiResponse&lt;List&lt;AssetProportion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AssetProportion>> assetProportionsGetWithHttpInfo(Long portfolioId, String sortBy) throws ApiException {
        com.squareup.okhttp.Call call = assetProportionsGetValidateBeforeCall(portfolioId, sortBy, null, null);
        Type localVarReturnType = new TypeToken<List<AssetProportion>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get the list of transactions related to a portfolio
     * @param portfolioId Portfolio for which the transaction was made (required)
     * @param sortBy The sorting order in which the data is required (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assetProportionsGetAsync(Long portfolioId, String sortBy, final ApiCallback<List<AssetProportion>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assetProportionsGetValidateBeforeCall(portfolioId, sortBy, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AssetProportion>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for assetSearchGet
     * @param searchString The string used to find matching assets (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call assetSearchGetCall(String searchString, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/asset_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (searchString != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchString", searchString));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call assetSearchGetValidateBeforeCall(String searchString, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = assetSearchGetCall(searchString, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Search for an asset/assets
     * @param searchString The string used to find matching assets (optional)
     * @return List&lt;Asset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Asset> assetSearchGet(String searchString) throws ApiException {
        ApiResponse<List<Asset>> resp = assetSearchGetWithHttpInfo(searchString);
        return resp.getData();
    }

    /**
     * 
     * Search for an asset/assets
     * @param searchString The string used to find matching assets (optional)
     * @return ApiResponse&lt;List&lt;Asset&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Asset>> assetSearchGetWithHttpInfo(String searchString) throws ApiException {
        com.squareup.okhttp.Call call = assetSearchGetValidateBeforeCall(searchString, null, null);
        Type localVarReturnType = new TypeToken<List<Asset>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search for an asset/assets
     * @param searchString The string used to find matching assets (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assetSearchGetAsync(String searchString, final ApiCallback<List<Asset>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assetSearchGetValidateBeforeCall(searchString, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Asset>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for holdingAssetSearchGet
     * @param portfolioId Id of the portfolio (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call holdingAssetSearchGetCall(Long portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/holdingAsset_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolioId", portfolioId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call holdingAssetSearchGetValidateBeforeCall(Long portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling holdingAssetSearchGet(Async)");
        }
        
        com.squareup.okhttp.Call call = holdingAssetSearchGetCall(portfolioId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Search for all the assets held by the user
     * @param portfolioId Id of the portfolio (required)
     * @return List&lt;HoldingAsset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<HoldingAsset> holdingAssetSearchGet(Long portfolioId) throws ApiException {
        ApiResponse<List<HoldingAsset>> resp = holdingAssetSearchGetWithHttpInfo(portfolioId);
        return resp.getData();
    }

    /**
     * 
     * Search for all the assets held by the user
     * @param portfolioId Id of the portfolio (required)
     * @return ApiResponse&lt;List&lt;HoldingAsset&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<HoldingAsset>> holdingAssetSearchGetWithHttpInfo(Long portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = holdingAssetSearchGetValidateBeforeCall(portfolioId, null, null);
        Type localVarReturnType = new TypeToken<List<HoldingAsset>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search for all the assets held by the user
     * @param portfolioId Id of the portfolio (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call holdingAssetSearchGetAsync(Long portfolioId, final ApiCallback<List<HoldingAsset>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = holdingAssetSearchGetValidateBeforeCall(portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<HoldingAsset>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for holdingassetpricedataGet
     * @param portfolioId Id of the portfolio (required)
     * @param startDate to get the assetprice data starting from a particular date (optional)
     * @param endDate to get the assetprice data till a particular date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call holdingassetpricedataGetCall(Long portfolioId, OffsetDateTime startDate, OffsetDateTime endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/holdingassetpricedata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolioId", portfolioId));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call holdingassetpricedataGetValidateBeforeCall(Long portfolioId, OffsetDateTime startDate, OffsetDateTime endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling holdingassetpricedataGet(Async)");
        }
        
        com.squareup.okhttp.Call call = holdingassetpricedataGetCall(portfolioId, startDate, endDate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get all the pricedata related to the holding assets of a particular portfolio
     * @param portfolioId Id of the portfolio (required)
     * @param startDate to get the assetprice data starting from a particular date (optional)
     * @param endDate to get the assetprice data till a particular date (optional)
     * @return List&lt;AssetPriceOverTime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AssetPriceOverTime> holdingassetpricedataGet(Long portfolioId, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        ApiResponse<List<AssetPriceOverTime>> resp = holdingassetpricedataGetWithHttpInfo(portfolioId, startDate, endDate);
        return resp.getData();
    }

    /**
     * 
     * Get all the pricedata related to the holding assets of a particular portfolio
     * @param portfolioId Id of the portfolio (required)
     * @param startDate to get the assetprice data starting from a particular date (optional)
     * @param endDate to get the assetprice data till a particular date (optional)
     * @return ApiResponse&lt;List&lt;AssetPriceOverTime&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AssetPriceOverTime>> holdingassetpricedataGetWithHttpInfo(Long portfolioId, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        com.squareup.okhttp.Call call = holdingassetpricedataGetValidateBeforeCall(portfolioId, startDate, endDate, null, null);
        Type localVarReturnType = new TypeToken<List<AssetPriceOverTime>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all the pricedata related to the holding assets of a particular portfolio
     * @param portfolioId Id of the portfolio (required)
     * @param startDate to get the assetprice data starting from a particular date (optional)
     * @param endDate to get the assetprice data till a particular date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call holdingassetpricedataGetAsync(Long portfolioId, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<List<AssetPriceOverTime>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = holdingassetpricedataGetValidateBeforeCall(portfolioId, startDate, endDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AssetPriceOverTime>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for portfolioAddPost
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioName Name of the portfolio (required)
     * @param portfolioType The type of the portfolio (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call portfolioAddPostCall(Long assertedUser, String portfolioName, String portfolioType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/portfolio_add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (assertedUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asserted_user", assertedUser));
        if (portfolioName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_name", portfolioName));
        if (portfolioType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_type", portfolioType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call portfolioAddPostValidateBeforeCall(Long assertedUser, String portfolioName, String portfolioType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'assertedUser' is set
        if (assertedUser == null) {
            throw new ApiException("Missing the required parameter 'assertedUser' when calling portfolioAddPost(Async)");
        }
        // verify the required parameter 'portfolioName' is set
        if (portfolioName == null) {
            throw new ApiException("Missing the required parameter 'portfolioName' when calling portfolioAddPost(Async)");
        }
        // verify the required parameter 'portfolioType' is set
        if (portfolioType == null) {
            throw new ApiException("Missing the required parameter 'portfolioType' when calling portfolioAddPost(Async)");
        }
        
        com.squareup.okhttp.Call call = portfolioAddPostCall(assertedUser, portfolioName, portfolioType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Add a portfolio to the user profile
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioName Name of the portfolio (required)
     * @param portfolioType The type of the portfolio (required)
     * @return Portfolio
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portfolio portfolioAddPost(Long assertedUser, String portfolioName, String portfolioType) throws ApiException {
        ApiResponse<Portfolio> resp = portfolioAddPostWithHttpInfo(assertedUser, portfolioName, portfolioType);
        return resp.getData();
    }

    /**
     * 
     * Add a portfolio to the user profile
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioName Name of the portfolio (required)
     * @param portfolioType The type of the portfolio (required)
     * @return ApiResponse&lt;Portfolio&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portfolio> portfolioAddPostWithHttpInfo(Long assertedUser, String portfolioName, String portfolioType) throws ApiException {
        com.squareup.okhttp.Call call = portfolioAddPostValidateBeforeCall(assertedUser, portfolioName, portfolioType, null, null);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a portfolio to the user profile
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioName Name of the portfolio (required)
     * @param portfolioType The type of the portfolio (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call portfolioAddPostAsync(Long assertedUser, String portfolioName, String portfolioType, final ApiCallback<Portfolio> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = portfolioAddPostValidateBeforeCall(assertedUser, portfolioName, portfolioType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for portfolioAggregateforGraphGet
     * @param portfolioId Id of the portfolio (optional)
     * @param startDate The start date of the analytic calculation (optional)
     * @param endDate The end date of the analytic calculation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call portfolioAggregateforGraphGetCall(Long portfolioId, OffsetDateTime startDate, OffsetDateTime endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/portfolioAggregateforGraph";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolioId", portfolioId));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call portfolioAggregateforGraphGetValidateBeforeCall(Long portfolioId, OffsetDateTime startDate, OffsetDateTime endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = portfolioAggregateforGraphGetCall(portfolioId, startDate, endDate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * The aggregate price data of the overall portfolio required for analytics 
     * @param portfolioId Id of the portfolio (optional)
     * @param startDate The start date of the analytic calculation (optional)
     * @param endDate The end date of the analytic calculation (optional)
     * @return PortfolioAggregateData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioAggregateData portfolioAggregateforGraphGet(Long portfolioId, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        ApiResponse<PortfolioAggregateData> resp = portfolioAggregateforGraphGetWithHttpInfo(portfolioId, startDate, endDate);
        return resp.getData();
    }

    /**
     * 
     * The aggregate price data of the overall portfolio required for analytics 
     * @param portfolioId Id of the portfolio (optional)
     * @param startDate The start date of the analytic calculation (optional)
     * @param endDate The end date of the analytic calculation (optional)
     * @return ApiResponse&lt;PortfolioAggregateData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioAggregateData> portfolioAggregateforGraphGetWithHttpInfo(Long portfolioId, OffsetDateTime startDate, OffsetDateTime endDate) throws ApiException {
        com.squareup.okhttp.Call call = portfolioAggregateforGraphGetValidateBeforeCall(portfolioId, startDate, endDate, null, null);
        Type localVarReturnType = new TypeToken<PortfolioAggregateData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The aggregate price data of the overall portfolio required for analytics 
     * @param portfolioId Id of the portfolio (optional)
     * @param startDate The start date of the analytic calculation (optional)
     * @param endDate The end date of the analytic calculation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call portfolioAggregateforGraphGetAsync(Long portfolioId, OffsetDateTime startDate, OffsetDateTime endDate, final ApiCallback<PortfolioAggregateData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = portfolioAggregateforGraphGetValidateBeforeCall(portfolioId, startDate, endDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioAggregateData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for portfolioDeletePost
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioId The id of the portfolio to to be deleted (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call portfolioDeletePostCall(Long assertedUser, Long portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/portfolio_delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (assertedUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asserted_user", assertedUser));
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolioId", portfolioId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call portfolioDeletePostValidateBeforeCall(Long assertedUser, Long portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'assertedUser' is set
        if (assertedUser == null) {
            throw new ApiException("Missing the required parameter 'assertedUser' when calling portfolioDeletePost(Async)");
        }
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling portfolioDeletePost(Async)");
        }
        
        com.squareup.okhttp.Call call = portfolioDeletePostCall(assertedUser, portfolioId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Deleting a specific portfolio
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioId The id of the portfolio to to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void portfolioDeletePost(Long assertedUser, Long portfolioId) throws ApiException {
        portfolioDeletePostWithHttpInfo(assertedUser, portfolioId);
    }

    /**
     * 
     * Deleting a specific portfolio
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioId The id of the portfolio to to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> portfolioDeletePostWithHttpInfo(Long assertedUser, Long portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = portfolioDeletePostValidateBeforeCall(assertedUser, portfolioId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Deleting a specific portfolio
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioId The id of the portfolio to to be deleted (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call portfolioDeletePostAsync(Long assertedUser, Long portfolioId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = portfolioDeletePostValidateBeforeCall(assertedUser, portfolioId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for portfolioSearchGet
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioName Name of the portfolio (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call portfolioSearchGetCall(Long assertedUser, String portfolioName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/portfolio_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (assertedUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asserted_user", assertedUser));
        if (portfolioName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolio_name", portfolioName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call portfolioSearchGetValidateBeforeCall(Long assertedUser, String portfolioName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'assertedUser' is set
        if (assertedUser == null) {
            throw new ApiException("Missing the required parameter 'assertedUser' when calling portfolioSearchGet(Async)");
        }
        
        com.squareup.okhttp.Call call = portfolioSearchGetCall(assertedUser, portfolioName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Search for all, or a subset of all portfolios
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioName Name of the portfolio (optional)
     * @return List&lt;Portfolio&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Portfolio> portfolioSearchGet(Long assertedUser, String portfolioName) throws ApiException {
        ApiResponse<List<Portfolio>> resp = portfolioSearchGetWithHttpInfo(assertedUser, portfolioName);
        return resp.getData();
    }

    /**
     * 
     * Search for all, or a subset of all portfolios
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioName Name of the portfolio (optional)
     * @return ApiResponse&lt;List&lt;Portfolio&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Portfolio>> portfolioSearchGetWithHttpInfo(Long assertedUser, String portfolioName) throws ApiException {
        com.squareup.okhttp.Call call = portfolioSearchGetValidateBeforeCall(assertedUser, portfolioName, null, null);
        Type localVarReturnType = new TypeToken<List<Portfolio>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search for all, or a subset of all portfolios
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioName Name of the portfolio (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call portfolioSearchGetAsync(Long assertedUser, String portfolioName, final ApiCallback<List<Portfolio>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = portfolioSearchGetValidateBeforeCall(assertedUser, portfolioName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Portfolio>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for portfolioShareAddPost
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioId The id of the portfolio being shared (required)
     * @param sharedWithEmail The email with which the portfolio is being shared with (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call portfolioShareAddPostCall(Long assertedUser, Long portfolioId, String sharedWithEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/portfolioShare_add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (assertedUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asserted_user", assertedUser));
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolioId", portfolioId));
        if (sharedWithEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("SharedWithEmail", sharedWithEmail));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call portfolioShareAddPostValidateBeforeCall(Long assertedUser, Long portfolioId, String sharedWithEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'assertedUser' is set
        if (assertedUser == null) {
            throw new ApiException("Missing the required parameter 'assertedUser' when calling portfolioShareAddPost(Async)");
        }
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling portfolioShareAddPost(Async)");
        }
        // verify the required parameter 'sharedWithEmail' is set
        if (sharedWithEmail == null) {
            throw new ApiException("Missing the required parameter 'sharedWithEmail' when calling portfolioShareAddPost(Async)");
        }
        
        com.squareup.okhttp.Call call = portfolioShareAddPostCall(assertedUser, portfolioId, sharedWithEmail, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Share a portfolio with an another user
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioId The id of the portfolio being shared (required)
     * @param sharedWithEmail The email with which the portfolio is being shared with (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void portfolioShareAddPost(Long assertedUser, Long portfolioId, String sharedWithEmail) throws ApiException {
        portfolioShareAddPostWithHttpInfo(assertedUser, portfolioId, sharedWithEmail);
    }

    /**
     * 
     * Share a portfolio with an another user
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioId The id of the portfolio being shared (required)
     * @param sharedWithEmail The email with which the portfolio is being shared with (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> portfolioShareAddPostWithHttpInfo(Long assertedUser, Long portfolioId, String sharedWithEmail) throws ApiException {
        com.squareup.okhttp.Call call = portfolioShareAddPostValidateBeforeCall(assertedUser, portfolioId, sharedWithEmail, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Share a portfolio with an another user
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioId The id of the portfolio being shared (required)
     * @param sharedWithEmail The email with which the portfolio is being shared with (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call portfolioShareAddPostAsync(Long assertedUser, Long portfolioId, String sharedWithEmail, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = portfolioShareAddPostValidateBeforeCall(assertedUser, portfolioId, sharedWithEmail, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for portfolioShareDeletePost
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioId The id of the portfolio involved in sharing. (required)
     * @param sharedWithEmail The email with which the portfolio is being shared with (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call portfolioShareDeletePostCall(Long assertedUser, Long portfolioId, String sharedWithEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/portfolioShare_delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (assertedUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asserted_user", assertedUser));
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolioId", portfolioId));
        if (sharedWithEmail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("SharedWithEmail", sharedWithEmail));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call portfolioShareDeletePostValidateBeforeCall(Long assertedUser, Long portfolioId, String sharedWithEmail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'assertedUser' is set
        if (assertedUser == null) {
            throw new ApiException("Missing the required parameter 'assertedUser' when calling portfolioShareDeletePost(Async)");
        }
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling portfolioShareDeletePost(Async)");
        }
        // verify the required parameter 'sharedWithEmail' is set
        if (sharedWithEmail == null) {
            throw new ApiException("Missing the required parameter 'sharedWithEmail' when calling portfolioShareDeletePost(Async)");
        }
        
        com.squareup.okhttp.Call call = portfolioShareDeletePostCall(assertedUser, portfolioId, sharedWithEmail, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Stop sharing a portfolio
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioId The id of the portfolio involved in sharing. (required)
     * @param sharedWithEmail The email with which the portfolio is being shared with (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void portfolioShareDeletePost(Long assertedUser, Long portfolioId, String sharedWithEmail) throws ApiException {
        portfolioShareDeletePostWithHttpInfo(assertedUser, portfolioId, sharedWithEmail);
    }

    /**
     * 
     * Stop sharing a portfolio
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioId The id of the portfolio involved in sharing. (required)
     * @param sharedWithEmail The email with which the portfolio is being shared with (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> portfolioShareDeletePostWithHttpInfo(Long assertedUser, Long portfolioId, String sharedWithEmail) throws ApiException {
        com.squareup.okhttp.Call call = portfolioShareDeletePostValidateBeforeCall(assertedUser, portfolioId, sharedWithEmail, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Stop sharing a portfolio
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioId The id of the portfolio involved in sharing. (required)
     * @param sharedWithEmail The email with which the portfolio is being shared with (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call portfolioShareDeletePostAsync(Long assertedUser, Long portfolioId, String sharedWithEmail, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = portfolioShareDeletePostValidateBeforeCall(assertedUser, portfolioId, sharedWithEmail, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for portfolioShareSearchGet
     * @param userId The userid of the user viewing portfolio shared with him/her (optional)
     * @param portfolioId The portfolioId of the portfolio that is being shared with another user/users (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call portfolioShareSearchGetCall(Long userId, Long portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/portfolioShare_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolioId", portfolioId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call portfolioShareSearchGetValidateBeforeCall(Long userId, Long portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = portfolioShareSearchGetCall(userId, portfolioId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get the list of portfolios that shared with a user/users to which a portfolio is shared (needs atleast one of the parameters)
     * @param userId The userid of the user viewing portfolio shared with him/her (optional)
     * @param portfolioId The portfolioId of the portfolio that is being shared with another user/users (optional)
     * @return List&lt;SharedPortfolio&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SharedPortfolio> portfolioShareSearchGet(Long userId, Long portfolioId) throws ApiException {
        ApiResponse<List<SharedPortfolio>> resp = portfolioShareSearchGetWithHttpInfo(userId, portfolioId);
        return resp.getData();
    }

    /**
     * 
     * get the list of portfolios that shared with a user/users to which a portfolio is shared (needs atleast one of the parameters)
     * @param userId The userid of the user viewing portfolio shared with him/her (optional)
     * @param portfolioId The portfolioId of the portfolio that is being shared with another user/users (optional)
     * @return ApiResponse&lt;List&lt;SharedPortfolio&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SharedPortfolio>> portfolioShareSearchGetWithHttpInfo(Long userId, Long portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = portfolioShareSearchGetValidateBeforeCall(userId, portfolioId, null, null);
        Type localVarReturnType = new TypeToken<List<SharedPortfolio>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get the list of portfolios that shared with a user/users to which a portfolio is shared (needs atleast one of the parameters)
     * @param userId The userid of the user viewing portfolio shared with him/her (optional)
     * @param portfolioId The portfolioId of the portfolio that is being shared with another user/users (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call portfolioShareSearchGetAsync(Long userId, Long portfolioId, final ApiCallback<List<SharedPortfolio>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = portfolioShareSearchGetValidateBeforeCall(userId, portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SharedPortfolio>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for portfolioTransactionAddPost
     * @param body Filled out porttfolio transaction item (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call portfolioTransactionAddPostCall(PortfolioTransactionItem body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/portfolioTransaction_add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call portfolioTransactionAddPostValidateBeforeCall(PortfolioTransactionItem body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling portfolioTransactionAddPost(Async)");
        }
        
        com.squareup.okhttp.Call call = portfolioTransactionAddPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Make a new transaction for the portfolio
     * @param body Filled out porttfolio transaction item (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void portfolioTransactionAddPost(PortfolioTransactionItem body) throws ApiException {
        portfolioTransactionAddPostWithHttpInfo(body);
    }

    /**
     * 
     * Make a new transaction for the portfolio
     * @param body Filled out porttfolio transaction item (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> portfolioTransactionAddPostWithHttpInfo(PortfolioTransactionItem body) throws ApiException {
        com.squareup.okhttp.Call call = portfolioTransactionAddPostValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Make a new transaction for the portfolio
     * @param body Filled out porttfolio transaction item (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call portfolioTransactionAddPostAsync(PortfolioTransactionItem body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = portfolioTransactionAddPostValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for portfolioTransactionDeletePost
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioTransactionId Unique identifier of PortfolioTransaction that needs to be deleted (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call portfolioTransactionDeletePostCall(Long assertedUser, Long portfolioTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/portfolioTransaction_delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (assertedUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asserted_user", assertedUser));
        if (portfolioTransactionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolioTransactionId", portfolioTransactionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call portfolioTransactionDeletePostValidateBeforeCall(Long assertedUser, Long portfolioTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'assertedUser' is set
        if (assertedUser == null) {
            throw new ApiException("Missing the required parameter 'assertedUser' when calling portfolioTransactionDeletePost(Async)");
        }
        // verify the required parameter 'portfolioTransactionId' is set
        if (portfolioTransactionId == null) {
            throw new ApiException("Missing the required parameter 'portfolioTransactionId' when calling portfolioTransactionDeletePost(Async)");
        }
        
        com.squareup.okhttp.Call call = portfolioTransactionDeletePostCall(assertedUser, portfolioTransactionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * delete a portfolio transaction
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioTransactionId Unique identifier of PortfolioTransaction that needs to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void portfolioTransactionDeletePost(Long assertedUser, Long portfolioTransactionId) throws ApiException {
        portfolioTransactionDeletePostWithHttpInfo(assertedUser, portfolioTransactionId);
    }

    /**
     * 
     * delete a portfolio transaction
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioTransactionId Unique identifier of PortfolioTransaction that needs to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> portfolioTransactionDeletePostWithHttpInfo(Long assertedUser, Long portfolioTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = portfolioTransactionDeletePostValidateBeforeCall(assertedUser, portfolioTransactionId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * delete a portfolio transaction
     * @param assertedUser The id of the user making the request (required)
     * @param portfolioTransactionId Unique identifier of PortfolioTransaction that needs to be deleted (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call portfolioTransactionDeletePostAsync(Long assertedUser, Long portfolioTransactionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = portfolioTransactionDeletePostValidateBeforeCall(assertedUser, portfolioTransactionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for portfolioTransactionSearchGet
     * @param portfolioId Portfolio for which the transaction was made (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call portfolioTransactionSearchGetCall(Long portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/portfolioTransaction_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolioId", portfolioId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call portfolioTransactionSearchGetValidateBeforeCall(Long portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling portfolioTransactionSearchGet(Async)");
        }
        
        com.squareup.okhttp.Call call = portfolioTransactionSearchGetCall(portfolioId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * get the list of transactions related to a portfolio
     * @param portfolioId Portfolio for which the transaction was made (required)
     * @return List&lt;PortfolioTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PortfolioTransaction> portfolioTransactionSearchGet(Long portfolioId) throws ApiException {
        ApiResponse<List<PortfolioTransaction>> resp = portfolioTransactionSearchGetWithHttpInfo(portfolioId);
        return resp.getData();
    }

    /**
     * 
     * get the list of transactions related to a portfolio
     * @param portfolioId Portfolio for which the transaction was made (required)
     * @return ApiResponse&lt;List&lt;PortfolioTransaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PortfolioTransaction>> portfolioTransactionSearchGetWithHttpInfo(Long portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = portfolioTransactionSearchGetValidateBeforeCall(portfolioId, null, null);
        Type localVarReturnType = new TypeToken<List<PortfolioTransaction>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get the list of transactions related to a portfolio
     * @param portfolioId Portfolio for which the transaction was made (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call portfolioTransactionSearchGetAsync(Long portfolioId, final ApiCallback<List<PortfolioTransaction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = portfolioTransactionSearchGetValidateBeforeCall(portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PortfolioTransaction>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for portfolioTransactionUpdatePost
     * @param transactionId The transaction to be updated (required)
     * @param assetQuantity the new quantity of the asset (optional)
     * @param newDate the new date on which the asset has been sold or purchased (optional)
     * @param assetPrice the new price of the asset (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call portfolioTransactionUpdatePostCall(Long transactionId, Double assetQuantity, OffsetDateTime newDate, Double assetPrice, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/portfolioTransaction_update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (transactionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("transactionId", transactionId));
        if (assetQuantity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("assetQuantity", assetQuantity));
        if (newDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("newDate", newDate));
        if (assetPrice != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("assetPrice", assetPrice));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call portfolioTransactionUpdatePostValidateBeforeCall(Long transactionId, Double assetQuantity, OffsetDateTime newDate, Double assetPrice, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling portfolioTransactionUpdatePost(Async)");
        }
        
        com.squareup.okhttp.Call call = portfolioTransactionUpdatePostCall(transactionId, assetQuantity, newDate, assetPrice, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update the asset quatntity in a porfolio transaction/date the asset has been purchased or sold
     * @param transactionId The transaction to be updated (required)
     * @param assetQuantity the new quantity of the asset (optional)
     * @param newDate the new date on which the asset has been sold or purchased (optional)
     * @param assetPrice the new price of the asset (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void portfolioTransactionUpdatePost(Long transactionId, Double assetQuantity, OffsetDateTime newDate, Double assetPrice) throws ApiException {
        portfolioTransactionUpdatePostWithHttpInfo(transactionId, assetQuantity, newDate, assetPrice);
    }

    /**
     * 
     * Update the asset quatntity in a porfolio transaction/date the asset has been purchased or sold
     * @param transactionId The transaction to be updated (required)
     * @param assetQuantity the new quantity of the asset (optional)
     * @param newDate the new date on which the asset has been sold or purchased (optional)
     * @param assetPrice the new price of the asset (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> portfolioTransactionUpdatePostWithHttpInfo(Long transactionId, Double assetQuantity, OffsetDateTime newDate, Double assetPrice) throws ApiException {
        com.squareup.okhttp.Call call = portfolioTransactionUpdatePostValidateBeforeCall(transactionId, assetQuantity, newDate, assetPrice, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Update the asset quatntity in a porfolio transaction/date the asset has been purchased or sold
     * @param transactionId The transaction to be updated (required)
     * @param assetQuantity the new quantity of the asset (optional)
     * @param newDate the new date on which the asset has been sold or purchased (optional)
     * @param assetPrice the new price of the asset (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call portfolioTransactionUpdatePostAsync(Long transactionId, Double assetQuantity, OffsetDateTime newDate, Double assetPrice, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = portfolioTransactionUpdatePostValidateBeforeCall(transactionId, assetQuantity, newDate, assetPrice, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for userChangeCurrencyPost
     * @param assertedUser The id of the user making the request (required)
     * @param newCurrency The new currency of the user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userChangeCurrencyPostCall(Long assertedUser, String newCurrency, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user_change_currency";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (assertedUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asserted_user", assertedUser));
        if (newCurrency != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("new_currency", newCurrency));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userChangeCurrencyPostValidateBeforeCall(Long assertedUser, String newCurrency, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'assertedUser' is set
        if (assertedUser == null) {
            throw new ApiException("Missing the required parameter 'assertedUser' when calling userChangeCurrencyPost(Async)");
        }
        // verify the required parameter 'newCurrency' is set
        if (newCurrency == null) {
            throw new ApiException("Missing the required parameter 'newCurrency' when calling userChangeCurrencyPost(Async)");
        }
        
        com.squareup.okhttp.Call call = userChangeCurrencyPostCall(assertedUser, newCurrency, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update the currency of a user
     * @param assertedUser The id of the user making the request (required)
     * @param newCurrency The new currency of the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void userChangeCurrencyPost(Long assertedUser, String newCurrency) throws ApiException {
        userChangeCurrencyPostWithHttpInfo(assertedUser, newCurrency);
    }

    /**
     * 
     * Update the currency of a user
     * @param assertedUser The id of the user making the request (required)
     * @param newCurrency The new currency of the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> userChangeCurrencyPostWithHttpInfo(Long assertedUser, String newCurrency) throws ApiException {
        com.squareup.okhttp.Call call = userChangeCurrencyPostValidateBeforeCall(assertedUser, newCurrency, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Update the currency of a user
     * @param assertedUser The id of the user making the request (required)
     * @param newCurrency The new currency of the user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userChangeCurrencyPostAsync(Long assertedUser, String newCurrency, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userChangeCurrencyPostValidateBeforeCall(assertedUser, newCurrency, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for userDeletePost
     * @param assertedUser The id of the user making the request (required)
     * @param id the id to be deleted (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userDeletePostCall(Long assertedUser, Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user_delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (assertedUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asserted_user", assertedUser));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userDeletePostValidateBeforeCall(Long assertedUser, Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'assertedUser' is set
        if (assertedUser == null) {
            throw new ApiException("Missing the required parameter 'assertedUser' when calling userDeletePost(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling userDeletePost(Async)");
        }
        
        com.squareup.okhttp.Call call = userDeletePostCall(assertedUser, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * The user deleting their own account or an admin deleting an account
     * @param assertedUser The id of the user making the request (required)
     * @param id the id to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void userDeletePost(Long assertedUser, Long id) throws ApiException {
        userDeletePostWithHttpInfo(assertedUser, id);
    }

    /**
     * 
     * The user deleting their own account or an admin deleting an account
     * @param assertedUser The id of the user making the request (required)
     * @param id the id to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> userDeletePostWithHttpInfo(Long assertedUser, Long id) throws ApiException {
        com.squareup.okhttp.Call call = userDeletePostValidateBeforeCall(assertedUser, id, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * The user deleting their own account or an admin deleting an account
     * @param assertedUser The id of the user making the request (required)
     * @param id the id to be deleted (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userDeletePostAsync(Long assertedUser, Long id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userDeletePostValidateBeforeCall(assertedUser, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for userForgotPasswordPost
     * @param email The email of the user making the request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userForgotPasswordPostCall(String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user_forgot_password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("email", email));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userForgotPasswordPostValidateBeforeCall(String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling userForgotPasswordPost(Async)");
        }
        
        com.squareup.okhttp.Call call = userForgotPasswordPostCall(email, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Reset the password for a user who forgot their password 
     * @param email The email of the user making the request (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String userForgotPasswordPost(String email) throws ApiException {
        ApiResponse<String> resp = userForgotPasswordPostWithHttpInfo(email);
        return resp.getData();
    }

    /**
     * 
     * Reset the password for a user who forgot their password 
     * @param email The email of the user making the request (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> userForgotPasswordPostWithHttpInfo(String email) throws ApiException {
        com.squareup.okhttp.Call call = userForgotPasswordPostValidateBeforeCall(email, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Reset the password for a user who forgot their password 
     * @param email The email of the user making the request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userForgotPasswordPostAsync(String email, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userForgotPasswordPostValidateBeforeCall(email, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userLoginPost
     * @param username Username of the user (required)
     * @param password Password of the user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userLoginPostCall(String username, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user_login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("username", username));
        if (password != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("password", password));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userLoginPostValidateBeforeCall(String username, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userLoginPost(Async)");
        }
        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling userLoginPost(Async)");
        }
        
        com.squareup.okhttp.Call call = userLoginPostCall(username, password, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * user is required to enter the username and the password to login into the user account
     * @param username Username of the user (required)
     * @param password Password of the user (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public User userLoginPost(String username, String password) throws ApiException {
        ApiResponse<User> resp = userLoginPostWithHttpInfo(username, password);
        return resp.getData();
    }

    /**
     * 
     * user is required to enter the username and the password to login into the user account
     * @param username Username of the user (required)
     * @param password Password of the user (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<User> userLoginPostWithHttpInfo(String username, String password) throws ApiException {
        com.squareup.okhttp.Call call = userLoginPostValidateBeforeCall(username, password, null, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * user is required to enter the username and the password to login into the user account
     * @param username Username of the user (required)
     * @param password Password of the user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userLoginPostAsync(String username, String password, final ApiCallback<User> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userLoginPostValidateBeforeCall(username, password, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userResetPasswordPost
     * @param assertedUser The id of the user making the request (required)
     * @param oldPassword The old password of the user (required)
     * @param newPassword The new password of the user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userResetPasswordPostCall(Long assertedUser, String oldPassword, String newPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user_reset_password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (assertedUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asserted_user", assertedUser));
        if (oldPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("old_password", oldPassword));
        if (newPassword != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("new_password", newPassword));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userResetPasswordPostValidateBeforeCall(Long assertedUser, String oldPassword, String newPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'assertedUser' is set
        if (assertedUser == null) {
            throw new ApiException("Missing the required parameter 'assertedUser' when calling userResetPasswordPost(Async)");
        }
        // verify the required parameter 'oldPassword' is set
        if (oldPassword == null) {
            throw new ApiException("Missing the required parameter 'oldPassword' when calling userResetPasswordPost(Async)");
        }
        // verify the required parameter 'newPassword' is set
        if (newPassword == null) {
            throw new ApiException("Missing the required parameter 'newPassword' when calling userResetPasswordPost(Async)");
        }
        
        com.squareup.okhttp.Call call = userResetPasswordPostCall(assertedUser, oldPassword, newPassword, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Update the password of a user
     * @param assertedUser The id of the user making the request (required)
     * @param oldPassword The old password of the user (required)
     * @param newPassword The new password of the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void userResetPasswordPost(Long assertedUser, String oldPassword, String newPassword) throws ApiException {
        userResetPasswordPostWithHttpInfo(assertedUser, oldPassword, newPassword);
    }

    /**
     * 
     * Update the password of a user
     * @param assertedUser The id of the user making the request (required)
     * @param oldPassword The old password of the user (required)
     * @param newPassword The new password of the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> userResetPasswordPostWithHttpInfo(Long assertedUser, String oldPassword, String newPassword) throws ApiException {
        com.squareup.okhttp.Call call = userResetPasswordPostValidateBeforeCall(assertedUser, oldPassword, newPassword, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Update the password of a user
     * @param assertedUser The id of the user making the request (required)
     * @param oldPassword The old password of the user (required)
     * @param newPassword The new password of the user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userResetPasswordPostAsync(Long assertedUser, String oldPassword, String newPassword, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userResetPasswordPostValidateBeforeCall(assertedUser, oldPassword, newPassword, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for userSearchGet
     * @param assertedUser The id of the user making the request (required)
     * @param email Email address of a user to search (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userSearchGetCall(Long assertedUser, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (assertedUser != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asserted_user", assertedUser));
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("email", email));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userSearchGetValidateBeforeCall(Long assertedUser, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'assertedUser' is set
        if (assertedUser == null) {
            throw new ApiException("Missing the required parameter 'assertedUser' when calling userSearchGet(Async)");
        }
        
        com.squareup.okhttp.Call call = userSearchGetCall(assertedUser, email, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Search for a user/view all the users
     * @param assertedUser The id of the user making the request (required)
     * @param email Email address of a user to search (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<User> userSearchGet(Long assertedUser, String email) throws ApiException {
        ApiResponse<List<User>> resp = userSearchGetWithHttpInfo(assertedUser, email);
        return resp.getData();
    }

    /**
     * 
     * Search for a user/view all the users
     * @param assertedUser The id of the user making the request (required)
     * @param email Email address of a user to search (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<User>> userSearchGetWithHttpInfo(Long assertedUser, String email) throws ApiException {
        com.squareup.okhttp.Call call = userSearchGetValidateBeforeCall(assertedUser, email, null, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search for a user/view all the users
     * @param assertedUser The id of the user making the request (required)
     * @param email Email address of a user to search (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userSearchGetAsync(Long assertedUser, String email, final ApiCallback<List<User>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userSearchGetValidateBeforeCall(assertedUser, email, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userSignupPost
     * @param body Filled out user signup form (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userSignupPostCall(UserSignup body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/user_signup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userSignupPostValidateBeforeCall(UserSignup body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling userSignupPost(Async)");
        }
        
        com.squareup.okhttp.Call call = userSignupPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * User is required to enter the details necessary to create an account
     * @param body Filled out user signup form (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void userSignupPost(UserSignup body) throws ApiException {
        userSignupPostWithHttpInfo(body);
    }

    /**
     * 
     * User is required to enter the details necessary to create an account
     * @param body Filled out user signup form (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> userSignupPostWithHttpInfo(UserSignup body) throws ApiException {
        com.squareup.okhttp.Call call = userSignupPostValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * User is required to enter the details necessary to create an account
     * @param body Filled out user signup form (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userSignupPostAsync(UserSignup body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userSignupPostValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
