package edu.albany.icsi418.fa19.teamy.backend.api;


import edu.albany.icsi418.fa19.teamy.backend.models.analytics.AssetAggregateData;
import edu.albany.icsi418.fa19.teamy.backend.models.analytics.PortfolioAggregateData;
import org.threeten.bp.OffsetDateTime;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.14).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-12-03T03:07:32.449Z[GMT]")
@Api(value = "analytic", description = "the analytic API")
public interface AnalyticApi {

    @ApiOperation(value = "", nickname = "analyticAssetAggregateGet", notes = "The aggregate of each asset in portfolio ", response = AssetAggregateData.class, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "The aggregate pricedata of each asset in a portfolio", response = AssetAggregateData.class),
            @ApiResponse(code = 404, message = "Record not found in the system"),
            @ApiResponse(code = 500, message = "An error occurred processing this request") })
    @RequestMapping(value = "/analytic/assetAggregate",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<AssetAggregateData> analyticAssetAggregateGet(@ApiParam(value = "Id of the portfolio") @Valid @RequestParam(value = "portfolioId", required = false) Long portfolioId,@ApiParam(value = "The start date of the analytic calculation") @Valid @RequestParam(value = "startDate", required = false) OffsetDateTime startDate,@ApiParam(value = "The end date of the analytic calculation") @Valid @RequestParam(value = "endDate", required = false) OffsetDateTime endDate);


    @ApiOperation(value = "", nickname = "analyticPortfolioAggregateGet", notes = "The aggregate price data of the overall portfolio required for analytics ", response = PortfolioAggregateData.class, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "The aggregate pricedata of a portfolio", response = PortfolioAggregateData.class),
            @ApiResponse(code = 404, message = "Record not found in the system"),
            @ApiResponse(code = 500, message = "An error occurred processing this request") })
    @RequestMapping(value = "/analytic/portfolioAggregate",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<PortfolioAggregateData> analyticPortfolioAggregateGet(@ApiParam(value = "Id of the portfolio") @Valid @RequestParam(value = "portfolioId", required = false) Long portfolioId, @ApiParam(value = "The start date of the analytic calculation") @Valid @RequestParam(value = "startDate", required = false) OffsetDateTime startDate, @ApiParam(value = "The end date of the analytic calculation") @Valid @RequestParam(value = "endDate", required = false) OffsetDateTime endDate);

}
